:PROPERTIES:
:ID:       4be852a8-cfae-4cfa-96e1-890d03ad4c9b
:END:
#+title: haskell-list-comprehensions

* Basics
List comprehensions are used to contruct new lists from existing lists.

#+begin_src haskell
  [x^2 | x <- [1..5]]
  -- Returns [1,4,9,16,25]
#+end_src

The symbol | represents "such that" while <- is read as "drawn from."

The expression "x <- [1..5]" is called a /generator/.
A list comprehension can have more than one generator, all being separated by commas.

#+begin_src haskell
  [(x,y) | x <- [1,2,3], y <- [4,5]]
  -- Returns [(1,4),(1,5),(2,4),(2,5),(3,4),(3,5)]
#+end_src

With multiple generators, one can think of it being more deeply nested, and
hence later generators change the values of their variables more frequently.

#+begin_src haskell
  concat :: [[a]] -> [a]
  concat xss = [x | xs <-- xss, x <-xs]

  firsts :: [(a,b)] -> [a]
  firsts ps = [x | (x,_) <- ps]

  length :: [a] -> Int
  length xs = sum [1 | _ <- xs]
#+end_src

* Guards
List comprehensions can also use logical expressions called guards to filter the
values produced by earlier generators.

#+begin_src haskell
  factors :: int -> [Int]
  factors n = [x | x <- [1..n], n 'mod' x == 0]

  factors 15
  [1,3,5,15]

  prime :: Int -> Bool
  prime n = factors n == [1,n]

  -- Now we can use 'prime' and list comprehension to make a basic primes
  primes :: Int -> [Int]
  primes n = [x | x <- [2..n], prime x]

  primes 20
  [2,3,5,7,11,13,17,19]
#+end_src
 
* The /zip/ function

The library function /zip/ produces a new list by pairing successive elements from
two existing lists until either or both lists are exhausted. For example:

>zip ['a','b','c'] [1,2,3,4]
 [('a',1),('b',2),('c',3)]

The function is useful when programming with list comprehensions.

* The Caesar Cipher
Let us make a Caesar cipher to test out list comprehensions.

"haskell is fun" -> "kdvnhoo lv ixq" with a shift-factor of 3.

** Encoding and Decoding

Standard functions on characters can be found in:

/import Data.char/

#+begin_src haskell
  let2int :: Char -> Int
  let2int c = ord c ord 'a'

  int2let :: Int -> Char
  int2let n = chr (ord 'a' + n)
#+end_src

The library functions /ord/ and /chr/ convert between unicode characters and unicode
numbers.

Using the two functions defined above, we can build a function *shift* that applies a shift
factor to a lower-case character by converting the letter into the corresponding integer,
adding on the shift factor and taking the remainder when divided by twenty-six, and
then converting back into a lower-case letter.

#+begin_src haskell
  shift :: Int -> Char -> Char
  shift n c | isLower c = int2let ((let2int c + n) 'mod' 26)
            | otherwise = c
#+end_src

Using *shift* with a list comprehension, it is now easy to define a function that encodes
a string using a given shift factor:

#+begin_src haskell
  encode :: Int -> String -> String
  encode n xs = [shift n x | x <- xs]
#+end_src

** Frequency Tables

The key to cracking the cipher is the observation that some letters are used more
frequently than others in English text. By analysing a large volume of such text,
one can derive the following table:

#+begin_src haskell
  table :: [Float]
  table = [8.1, 1.5, 2.8, 4.2, 12.7, 2.2, 2.0, 6.1, 7.0,
  0.2, 0.8, 4.0, 2.4, 6.7, 7.5, 1.9, 0.1, 6.0, 6.3, 9.0, 2.8, 1.0, 2.4, 0.2, 2.0, 0.1]
#+end_src

As you can see, the letter 'e' is the most frequent, with 12.7% while 'q' and 'z' are
the least frequent at just 0.1%. Making a function that calculates the percentage of
one integer with respect to another:

#+begin_src haskell
  percent :: Int -> Int -> Float
  percent n m = (fromIntegral n / fromIntegral m) * 100

  -- the function fromIntegral :: Int -> Float converts an integer into floating point
#+end_src

Using list comprehension we can make a function that can make a frequency table for
any string:

#+begin_src haskell
  freqs :: String -> [Float]
  freqs xs = [percent (count x xs) n | x <- ['a'..'z']]
    where n = lowers xs
#+end_src
